# Load the critics dataset.
critic <- read.csv('/critics.csv', sep=',', dec=',')
critic <- as.data.frame(critic)
colnames(critic) <- gsub('.', ' ', colnames(critic), fixed=T)
critic



## Calculate the pearson correlation between Lizzy and Paula

# Subset the initial dataframe critic to keep the rows of Lizzy and Paula
critic2 <- critic[(critic$User=='Lizzy'|critic$User=='Paula'),]

# Subset the previous dataframe critic2 to keep the columns that are not NA for both users, meaning that we keep the movies that they both 
# rated
critic3 <- critic2[,colSums(is.na(critic2))==0]

# Subset the previous dataframe critic3 into 2 separate dataframes, one for Lizzy and one for Paula, each containing only the user's row
liz <- critic3[critic3$User=='Lizzy',]
pau <- critic3[critic3$User=='Paula',]

# Calculate the Pearson correlation coefficient between Lizzy and Paula, without taking into consideration the 1st column of each 
# dataframe, which is the user's name
p_cor <-cor(as.numeric(liz[,-1]), as.numeric(pau[,-1]), use="complete.obs")

# Print the Pearson correlation coefficient between Lizzy and Paula
paste('Correlation between Lizzy and Paula:',round(p_cor,digits=7))



## Compare the movie ratings of Lizzy and Paula, of Lucy and Alison, and of Tom and Oliver

# Compare and show the movie ratings for Lizzy and Paula on a scatter plot
rownames(critic3) <- critic3$User
critic4 <- critic3[,-1]
critic5 <- t(critic4)
critic6 <- data.frame(critic5)

l <- data.frame(Lizzy=critic6$Lizzy,row.names=rownames(critic6))
p <- data.frame(Paula=critic6$Paula,row.names=rownames(critic6))

plot(l$Lizzy, p$Paula, xlab="Lizzy's Ratings", ylab="Paula's Ratings", main="Movie Ratings for Lizzy and Paula")

# Explanation of Lizzy and Paula's scatter plot
# When Lizzy gave a rating of 1, Paula gave a rating of 2 for that same movie. When Lizzy gave a rating of 2, Paula also gave a 
# rating of 2. When Lizzy gave a rating of 3, Paula once gave a rating of 1 and another time she gave a rating of 3. When Lizzy gave 
# a rating of 4, Paula once gave a rating of 3 and another time gave a rating of 5. When Lizzy gave a rating of 5, Paula gave a rating 
# of 2. This shows that they both gave the same rating when the rating was 2 (Toy Story and Groundhog Day), and then once gave the same 
# rating when the rating was 3 (Independence Day). We cannot accurately predict how Paula is going to rate a movie to which Lizzy gave 
# a rating of 3 or 4

# Compare and show the movie ratings for Lucy and Alison on a scatter plot
critic7 <- critic[(critic$User=='Lucy'|critic$User=='Alison'),]
critic8 <- critic7[,colSums(is.na(critic7))==0]
rownames(critic8) <- critic8$User
critic9 <- critic8[,-1]
critic10 <- t(critic9)
critic11 <- data.frame(critic10)

u <- data.frame(Lucy=critic11$Lucy,row.names=rownames(critic11))
a <- data.frame(Alison=critic11$Alison,row.names=rownames(critic11))

plot(u$Lucy, a$Alison, xlab="Lucy's Ratings", ylab="Alison's Ratings", main="Movie Ratings for Lucy and Alison")

# Explanation of Lucy and Alison's scatter plot
# When Lucy gave a rating of 1, Alison gave a rating of 4. When Lucy gave a rating of 2, Alison's rating varied from 2 to 5. When Lucy 
# gave a rating of 3, Alison's rating was either 3 or 5. When Lucy gave a rating of 4, Alison gave the same rating of 4 (The Silence of  
# the Lambs). When Lucy gave a rating of 5, Alison gave a rating of 2. This means that we cannot accurately predict how Alison is going to 
# rate a movie to which Lucy gave a rating of 2 or 3

# Compare and show the movie ratings for Tom and Oliver on a scatter plot
critic12 <- critic[(critic$User=='Tom'|critic$User=='Oliver'),]
critic13 <- critic12[,colSums(is.na(critic12))==0]
rownames(critic13) <- critic13$User
critic14 <- critic13[,-1]
critic15 <- t(critic14)
critic16 <- data.frame(critic15)

t <- data.frame(Tom=critic16$Tom,row.names=rownames(critic16))
o <- data.frame(Oliver=critic16$Oliver,row.names=rownames(critic16))

plot(t$Tom, o$Oliver, xlab="Tom's Ratings", ylab="Oliver's Ratings", main="Movie Ratings for Tom and Oliver")

# Explanation of Tom and Oliver's scatter plot
# The analysis of this scatter plot follows the same logic as that of the previous scatter plots. We cannot accurately predict how Oliver 
# is going to rate a movie to which Tom gave a rating of 3 or 4, because, in both cases, Oliver gave two different ratings.



## Get the top 5 movie recommendations for Lizzy 

# Subset the critic dataframe to only include Lizzy's row 
criticv <- critic[15,]

# Subset the previous dataframe criticv to only include columns that don't contain NA values, meaning to keep only the columns/movies that 
# Lizzy rated
criticv1 <- criticv[,colSums(is.na(criticv))==0]

# Calculate the average rating of Lizzy (first remove the 1st column that contains the user name)
criticv2 <- criticv1[,-1]
criticv3 <- as.numeric(criticv2)
rl <- mean(criticv3)

# Remove Lizzy's row from the original critic dataframe and store the result in a new dataframe called c
c <- critic[-15,]

# Calculate the rating average per user and add the output to a new column in the dataframe c
for (u in (1:nrow(c))){
  c[u,22] <- mean(as.numeric(c[u,-1]), na.rm=T)
}

colnames(c)[22] <- 'Rui'

# Calculate the personalised weight per user and add the output to a new column in the dataframe c
for (u in (1:nrow(c))){
  c[u,23] <- cor(as.numeric(c[u,2:21]), as.numeric(critic[15,2:21]), use="complete.obs")
}

colnames(c)[23] <- 'Weight'

# Create a new dataframe called temp that has the same number of rows as the dataframe c but two columns less (because we don't want to 
# include the rui and weight in this new dataframe)
temp <- data.frame(matrix(nrow=nrow(c),ncol=ncol(c)-2))
colnames(temp) <- colnames(c)[1:21]
temp$User <- c$User

# Calculate the numerator per user of the prediction formula and store the output in the new temp dataframe
for (i in (2:21)){
  for (u in (1:nrow(c))){
    temp[u,i] <- (as.numeric(c[u,i]) - (as.numeric(c[u,22]))) * (as.numeric(c[u,23]))
  }
}

# Create a new dataframe called num that has the same dimensions as the temp dataframe but doesn't include the User column
num <- data.frame(matrix(ncol=ncol(temp)-1,nrow=1))
colnames(num) <- colnames(temp[,-1])
temp1 <- temp[,-1]

# Calculate the summed numerator of the prediction formula and store the output in the new num dataframe
for (i in (1:20)){
  for (u in (1:nrow(temp1))){
    num[1,i] <- sum(temp1[,i], na.rm=T)
  }
}

# Calculate the denominator of the prediction formula
denom <- sum(abs(c[,23]), na.rm=T)

# Calculate the result of the prediction formula and store the output in a new row of the num dataframe 
for (i in (1:ncol(num))){
  num[2,i] <- rl + (num[1,i] / denom)
}

# Find the indices of the movies that Lizzy hasn't rated (that contain NA values) because we can't recommend to her movies that she 
# already rated
ind <- which(is.na(criticv))
ind1 <- ind-1

# Only keep the movies that Lizzy didn't rate, and store the output in a new dataframe called c1 
c1 <- num[,ind1]

# Order the c1 dataframe by the rating and get the top 5 movies recommended for Lizzy
top <- c1[,order(c1[2,],decreasing=T)]
top5 <- top[2,1:5]
paste(top5[1,], colnames(top5), sep=',')



## Get the top 5 movie critics that are most similar to Lizzy

# Get the weight (Pearson correlation) column (already created in question #3), then order it and get the top 5 
weights <- c[,c(1,23)]
higher <- weights[order(weights[,2],decreasing=T),]
highest <- higher[1:5,]

# The top 5 critics that are most similar to Lizzy are those that have the highest Pearson correlation compared to her
paste(highest[,2], highest[,1], sep=',')
